import React from 'react';
import { storiesOf } from '@storybook/react';
import { withInfo } from '@storybook/addon-info'
import StoryRouter from 'storybook-react-router'
import { Link } from 'react-router-dom';
import FontAwesomeIcon from '@fortawesome/react-fontawesome'
import {faSearch} from '@fortawesome/fontawesome-free-solid'
import globalStyles from '../styles/global-styles.css';
import cssVaribles from '../styles/css-variables.css';

import Tile from '../components/tile';
import Header from '../components/header';
import Subheader from '../components/subheader';
import Button from '../components/button';
import GhostButton from '../components/ghost-button';
import ColorButton from '../components/color-button';
import ReturnToHome from '../components/return-to-home'
import SocialBar from '../components/social-bar'
import Text from '../components/text'
import Modal from '../components/modal'
import Loading from '../components/loading'
import DecoderRings from '../components/decoder-rings'
import Sparkle from '../components/sparkle'
import TextArea from '../components/text-area'
import Search from '../components/search'
import Form from '../components/form'
import Table from '../components/data-table'
import ProgressBar from '../components/progress-bar'
import ProfileMap from '../components/profile-map'
import RadarChart from '../components/radar-chart'
import ProfilePercentagePhoto from '../components/profile-percentage-photo'
import Logo from '../components/logo'
import Accordion from '../components/accordion'
import Tabs from '../components/tabs'
import Clusters from '../components/clusters'
import ColorExamples from '../components/colors'
import Copyright from '../components/copyright'
import AlertDisplay from '../components/alert'
import PreferenceCodeInput from '../components/preference-code-input'
import ScoreTable from '../components/score-table'
import QuadrantLabel from '../components/quadrant-label'
import QuadIcon from '../components/quadrant-icons'
import Walkaround from '../components/walkaround'
import Switch from '../components/switch'
import BrainyBunch from '../components/brainy-bunch'
import Scale from '../components/scale'
import FlipCard from '../components/flip-card'
import Callout from '../components/callout'
import Drawer from '../components/drawer'
import Nav from '../components/nav'
import DraggableList from '../components/draggable-list'
import RadioButtonQuiz from '../components/radio-button-quiz'

storiesOf('Design Guidelines|Colors', module)
  .add('Brand Colors',
  withInfo(`Examples and hex codes for all official Herrmann brand colors.

  &nbsp;

  The **colors** we use not only have important significance in the interpretation of the Whole Brain® model, but also reflect the sense of vibrancy and diversity we attach to our brand promise of transformative thinking. Primary colors should be used in all instances, including text tiles, product logos, charts, and graphs involving data. The Secondary Palette is used for variances in our model and in some illustrations and other graphics when needed.

  &nbsp;

  **Secondary Colors** are mainly used for representing the degree of preference, from Very High to Low, in relation to the model. They can also be used sparingly in illustrations when more color variance is needed to discern content. Otherwise illustrations should use our primary colors only with black, white & gray accents.

  &nbsp;

  Light Gray is used for solid or dashed divider lines in print or web layouts. Dark Gray is used for the Herrmann logotype and associated elements. Gray and Black are used in text, interface & illustrations. Neutral Blue is used to add color without using a quadrant color.
  `)(() =>

    <ColorExamples/>
  ))

  .add('Usage Guidelines',
  (() =>
    <>
      <h4>White Space</h4>
      <p>To maintain a modern look and balance our strategic use of color elsewhere, white will always play a large role in our visual identity. A good rule of thumb is to ensure at least 25% of a page is white space.</p>

      <h4>Primary and accent colors</h4>
      <p>  Our primary colors should be the most visible on our graphics. However, dark and light color variants can be used to help content in the quadrant stand out from the background.</p>

      <h4>Color gradients</h4>
      <p>Our different color variants can be used for graphics showing different degrees of preference. Darker colors should correspond with the areas depicting stronger preferences.</p>

      <h4>Supporting illustrations</h4>
      <p>Supporting illustrations should use our colors in a restrained and balanced way, with flat, bold shapes and thin lines maximizing the impact of the color.</p>

      <h4>Color blocking</h4>
      <p>Color blocking in layouts should be used to help frame content, break up a page, or call attention to a header or sidebar. Be intentional when choosing a color for the block - **remember, our colors have meaning!**</p>

      <h4>Be Aware of</h4>
      <ul>
        <li>Unintentional qudrant color associations</li>
        <li>Ensuring that color is not your only means of quadrant identification / association</li>
        <li>Different cultural interpretations of colors</li>
      </ul>

      <h4>Avoid</h4>
      <ul>
        <li>Black as a background</li>
        <li>Use of non-branded colors (reminder that orange is _not_ a brand color)</li>
        <li>Low contrast / low readibility color combinations (ex. black on red)</li>
      </ul>
    </>
  ));

storiesOf('UI Components|Tile', module)
  .add('Unstyled Tile',
  withInfo(`Tile components are used to group like information or visually separate (and thereby call attention to) important information on a page.`)(() =>

    <Tile>
      <p>A completely unstyled Tile.</p>
    </Tile>
  ))

  .add('Portal Dashboard Tile',
  withInfo(`Tiles were designed to work together in a masonry-style grid layout (as in the Thinker Portal). If this is to be used as a homepage tile in the Portal, it needs to include a Subheader (as seen in the 'With Subheader' example).`)(() =>

    <Tile maxWidth={400}>
      <Subheader title="Example Title" />
      <p>A Tile as it would appear on the Thinker Portal homepage.</p>
    </Tile>
  ))

  .add('Quadrant Tile',
  withInfo(`Passing in a quadrant letter (A, B, C, or D) will give the Tile the associated quadrant-colored border, as well as adding the letter and quadrant icon on the left-hand side, as seen above. You cannot have a tile with a colored border that does not also include the letter and icon, for accessibility reasons (see accessibility guidelines for more information).`)(() =>

  <Tile maxWidth={300} quad="A">
    <p>An 'A Quadrant' Tile, used to display only that content which has a strong quadrant association.</p>
  </Tile>
));

storiesOf('UI Components|Subheader', module)
  .add('Default',
  withInfo(`Subheaders appear wherever we need to designate a subsection of information. You can see an example of use on the Thinker Portal homepage, where they identify the function and content of each Tile.`)(() =>

    <Subheader title="Example Title" />
  ));

storiesOf('UI Components|Buttons', module)
  .add('Primary',
  withInfo(`In most cases, the **Primary Button** style should be used (shown above).

In cases where there are multiple buttons and one needs to be emphasized (for example, offering _Cancel_ vs _Continue_ options in an action confirmation dialogue box), the **Secondary Button** style should be used for the suggested action.`)(() =>

      <Button
        variant="primary"
        buttonText="Primary Button"
        onClick={()=>{
          alert("Test!")
        }}
      />
  ))

  .add('Secondary',
  withInfo(`In most cases, the **Primary Button** style should be used.

In cases where there are multiple buttons and one needs to be emphasized (for example, offering _Cancel_ vs _Continue_ options in an action confirmation dialogue box), the **Secondary Button** style should be used for the suggested action.`)(() =>

      <Button
        variant="secondary"
        buttonText="Secondary Button"
      />
  ))

  .add('Small Button',
  withInfo(`A tertiary button, for use in places where a button is needed, but is not the primary or suggested action.`)(() =>

      <GhostButton
        buttonText="I'm smol"
        textColor="navy"
        onClick={()=>alert("clicked")}
      />
  ))

  .add('Color Button',
  withInfo(`Available in all of our quadrant colors, ColorButtons are currently used for the following reasons:

  - Green buttons are used to indicate an available action.
  - Red buttons are TBD.
  - Blue buttons are TBD.
  - Yellow buttons are TBD.

  `)(() =>

    <span>
      <ColorButton
        variant="green"
        buttonText="Green"
        onClick={()=>{
          alert("Test!")
        }}
      />
      <br/>
      <br/>
      <ColorButton
        variant="red"
        buttonText="Red"
        onClick={()=>{
          alert("Test!")
        }}
      />
      <br/>
      <br/>
      <ColorButton
        variant="blue"
        buttonText="Blue"
        onClick={()=>{
          alert("Test!")
        }}
      />
      <br/>
      <br/>
      <ColorButton
        variant="yellow"
        buttonText="Yellow"
        onClick={()=>{
          alert("Test!")
        }}
      />
    </span>
  ))

  .add('Disabled Buttons',
  withInfo(`For situations where the buttons are not clickable until the user completes a prerequesite action. The 'isLocked' prop can be applied to any of the available Buttons in the Library`)(() =>

      <Button
        buttonText="Can't click me ☹️"
        secondaryButtonText="Secondary Button"
        isLocked={true}
        variant="primary"
      />
  ));

storiesOf('Design Guidelines|Copy', module)
  .add('Headers, Body, Lists, Links, and Dividers',
  withInfo(`Descriptions and examples listed above; these styles should already be set as defaults in the Thinker Portal, but will need to be copied manually and applied selectively in other applications where we aren't using the new styles yet.`)(() =>

    <Text/>
  ))

  .add('Tone of Voice Guidelines',
  (() =>
    <>
    <h3>The Herrmann Tone of Voice is:</h3>

    <h4>Direct</h4>
    <p><b>We are</b> straight forward, confident and concise, and express our message in simple, easy to understand terms. We stick to the facts.</p>

    <p><b>We’re not</b> long winded or convoluted, or using jargon that suggests bland corporatism or pseudo-science.</p>

    <p>Sounds like: <i>“Our process has been designed to help you think more effectively. Because it is
    both simple and practical, it can help you tackle the most complex business problems and
    challenges”</i></p>

    <h4>Empathetic</h4>
    <p><b>We are</b> inclusive, warm, human. We love what we do and love to share our enthusiasm for the work and its positive outcomes.</p>

    <p><b>We are not</b> cool, detached, impersonal even while maintaining objectivity.</p>

    <p>Sounds like: <i>“We want you to succeed. So, as soon as you’ve passed your certification, you’ll be
    welcomed into out global network of Herrmann practitioners.”</i></p>

    <h4>Inspiring</h4>

    <p><b>We are</b> enthusiastic, energized, brimming with a sense opportunity, and eager to share ideas that
    change thinking behavior.</p>

    <p><b>We’re not</b> bogged down in detail and process, facts and figures. We’re seeing the bigger picture.</p>

    <p>Sounds Like: <i>“ Our proven methodology can help you transform every member of your team. By
    helping them explore and develop their full thinking potential you’ll create an environment in
    which they are highly engaged, energized and productive.”</i></p>
    </>
  ));

storiesOf('UI Components|Copyright', module)
  .add('© Year Component',
  withInfo('A short & sweet copyright component. The year updates automatically.')(() =>

    <Copyright/>
  ));

storiesOf('Design Guidelines|Herrmann Trademarks')
  .add('Usage Guidelines',
(() =>
    <>
    <h4>Important Guidelines When Using Herrmann Trademarks</h4>

    <ul>
    <li>A trademark is always followed by a noun in text. For example: <i>Whole Brain® Thinking</i>
      <li>Whole Brain® models, not just Whole Brain® without a noun following the trademark (exception: Whole Brain Technology®)</li>
    </li>
    <li>When using Whole Brain® in documents going outside the USA, the bottom of the document must read: <i>Whole Brain® is a registered trademark of Herrmann Global, LLC. Registered in the U.S. Patent and Trademark Office.</i></li>
    <li>Whole Brain® Models in documents created must be marked as follows (1) below graphic or (2) vertically on the side: <i>The Whole Brain® Model is a registered trademark of Herrmann Global, LLC.</i></li>
    <li>The TM or ® should always be superscripted.</li>
    </ul>

    <h4>Frequent Use of Trademark</h4>

    <p>On most of our products, we have some flexibility on
    where the trademarks are being shown when they are
    in multiple places throughout a document (e.g., for
    each product with an ® or TM, use once at the
    beginning of a page or in a most noticeable spot). The one exception to this is <i>Whole Brain®</i>, which <b>requires</b> marking every time.</p>

    <h4>Trademark Footnote Notices</h4>
    <p>Any time a trademarked item is used on a page, the
    footnote should include one of the following notices:</p>

    <ul>
    <li><i>HBDI® is a registered trademark of Herrmann Global,
    LLC.</i></li>
    <li><i>Whole Brain® is a registered trademark of Herrmann
    Global, LLC.</i></li>
    <li><i>The four-color, four-quadrant graphic is a registered
    trademarks of Herrmann Global, LLC.</i></li>
    <li><i>The four-color, four-quadrant graphic, HBDI® and
    Whole Brain® are registered trademarks of Herrmann
    Global, LLC.</i></li>
    </ul>
    </>
  ))

  .add('Current Herrmann Trademarks',
(() =>
    <>
    <h4>Existing Herrmann Trademarks</h4>
    <ul>
    <li>BOT™ (Business of Thinking)</li>
    <li>THE BUSINESS OF THINKING®</li>
    <li>BRAINBYTES®</li>
    <li>HERRMANN BRAIN DOMINANCE INSTRUMENT®</li>
    <li>HERRMANN®</li>
    <li>HBDI®</li>
    <li>HBDIinteractive®</li>
    <li>THINKING ACCELERATOR®</li>
    <li>THINKCENTERED™</li>
    <li>THINKING AGILITY®</li>
    <li>THINKING STYLES™</li>
    <li>WHOLE BRAIN®</li>
    <li>WHOLE BRAIN CREATIVITY®</li>
    <li>WHOLE BRAIN THINKING®</li>
    <li>WHOLE BRAIN TECHNOLOGY®</li>
    </ul>

    <h4>New & Refreshed Brands & Models Pending Trademark Registrations</h4>
    <ul>
    <li>HERRMANN AGILE THINKING SUITE®</li>
    <li>ALIGNEDTHINKER™</li>
    <li>AXON™ THINKING ANALYTICS PLATFORM</li>
    <li>BRAINMAIL™</li>
    <li>HBDI APP™</li>
    <li>HBDI DIGITAL RESULTS™</li>
    <li>HBDI STUDENT™</li>
    <li>HERRMANN TEAM DASHBOARD™</li>
    <li>WHOLE BRAIN MANAGER™</li>
    </ul>
    </>
  ));

storiesOf('UI Components|Header', module)
  .addDecorator(StoryRouter())
  .add('Default',
  withInfo(`This is the header for the Thinker Portal and HBDI Digital. It shows the blue geometric background, our logo (which will return them to the homepage when clicked), their name, and a link to their user settings _(not functional in Storybook)_. Setting the 'tileOverlap' prop to _true_ will add extra padding to the bottom for situations where tiles are meant to overlap the bottom of the header (like the Thinker Portal Dashboard).

  `)(() =>

      <Header
        tileOverlap={true}
        name="User Name"
        logoutText="Logout"
      />
    ));

storiesOf('UI Components|Profile Map', module)
  .add('Unlocked',
  withInfo('This is the standard profile map, used to show thinkers their scores in each quadrant.')(() =>

    <ProfileMap
      profileScores={{A:130, B:50, C:20, D:80}}
      strokeWidth={1}
      />
  ))

  .add('Locked',
  withInfo(`This blurred version of the map is intended for use when a profile map placeholder is needed, but the user has not yet unlocked their profile results.

  This can be toggled by setting 'isLocked' to 'true'.`)(() =>

    <ProfileMap
      isLocked={true}
      />
  ));

storiesOf('UI Components|Radar Chart', module)
  .add('Default',
  withInfo(`This is a graphical representation of a users preferences. It should be used in situations when you want something less detailed than the full profile map; it is intended to show high-level preferences at a glance.

  &nbsp;

  The values prop takes a number between 1-4, signifying how many arcs should be filled in. It's essentially an inverted preference code`)(()=>

    <RadarChart values={{A: 1, B: 2, C: 4, D: 3}} />
  ))

  .add('Gradient',
  withInfo(`When the useGradients prop is set to true, the chart colors go from light to dark, with the lightest colors on the inner ring.`)(()=>

    <RadarChart values={{A: 1, B: 2, C: 4, D: 3}} useGradients={true} />
  ))
  .add('Without Borders',
  withInfo(`When the showBorders prop is set to false, the arc lines and borders are removed, leaving only the radar shapes. This should only be used with useGradients, to ensure readability and at-a-glance understanding.`)(()=>

    <RadarChart values={{A: 1, B: 2, C: 4, D: 3}} useGradients={true} showBorders={false} />
  ))

storiesOf('UI Components|Profile Percentage Photo', module)
  .add('Default',
  withInfo(`A picture of one of the Great Brains, placed atop a circle (which indicates their percentages via pie chart display). To use this plugin, ensure that all the svg and png files in the build folder are copied to your application's public folder, and set the assetsUrl.

  &nbsp;

  We currently have the following Great Brains available: Abraham Lincoln, Aristotle, Louis Armstrong, J.S. Bach, Bigge, Chief Seattle, Jimmy Carter, Chopin, Winston Churchill, Confucius, Le Corbusier, Marie Curie, Albert Einstein, Ghandi, Bill Gates, Geronimo, Jim Henson, J. Edgar Hoover, Jackson, Immanuel Kant, Lagarde, Lamb, Lee, Mother Theresa, Barack Obama, Oprah, Pablo Picasso, The Queen Mother (Queen Elizabeth), Srinivasa Ramanujan, John Phillip Sousa, Margaret Thatcher, Tsu, and Kurt Vonnegut.

    &nbsp;

  You can also pass in a custom profileScores prop using the standard {A: 10, B: 20, C: 30, D: 40} format and it will render that percentage in the bagkround SVG with a generic Herrmann logo above.`)(()=>
      <>
      <ProfilePercentagePhoto
        name="custom"
        initials="LOL"
        profileScores={{A:60, B:20, C:120, D:80}}
        maxWidth={150}
      />
      <br/>
      <ProfilePercentagePhoto
        name="custom"
        profileScores={{A:10, B:100, C:20, D:60}}
        maxWidth={150}
      />
      <br/>
      <ProfilePercentagePhoto
        name="obama"
        maxWidth={150}
      />

      </>

  ));

storiesOf('UI Components|Modal', module)
  .addDecorator(StoryRouter())
  .add('Default',
  withInfo(`This is a modal with a green colored border, for confirming correct actions.

  &nbsp;

  In all modals, the title and text are both optional, but at least one button is mandatory. This is so the user is forced to take an action (confirm, deny, correct, or just acknowledge receipt of the message). The button.link property can be a string for a simple a tag, or a react component if you have specialized linking behavor. Please don't style the passed in component though.

  &nbsp;

  You can change the modal border color by changing the type to "confirm", "deny", or "neutral".`)(() =>

    <Modal color="navy" close={true}>
      <Subheader title="Hey there, I'm a Modal"/>
      <p>And we all sure do love a modal.</p>
    </Modal>
  ))
;

storiesOf('UI Components|Scale', module)
  .addDecorator(StoryRouter())
  .add('Default',
  withInfo(`This is a scale for showing a user's (or comparing two users') placement on a scale from 0 to whatever number you pass in using the 'segments' prop. Keep in mind that this is built using an array, so the numbering will start with 0 and not 1.

  To show initials instead of just the plain dot, pass in initials as part of the ThinkerA or ThinkerB props (see first example). If no initials are included, it will default to the plain dot.

  To use the intro / extro or day / night specific icons, pass in "intro" or "day" as the type. If there is no type, it will default to no icons and a navy gradient background.

  `)(() =>
    <>
      <Scale
        segments={5}
        maxWidth={500}
        type="intro"
        thinkerA={{
          initials: "PS",
          score: 1
        }}
        thinkerB={{
          initials: "OE",
          score: 4
        }}
      />

        <br/>

        <Scale
          segments={9}
          maxWidth={200}
          type="day"
          thinkerA={{
            score: 0
          }}
        />

        <br/>

        <Scale
          segments={12}
          maxWidth={350}
          showSegments={true}
          thinkerA={{
            score: 10
          }}
        />
    </>
  ))
;

storiesOf('UI Components|Forms & User Input', module)
.addDecorator(StoryRouter())
  .add('Text Area',
  withInfo(`This component should be used in any situation where a user needs to input more than just a few words of text. It is not resizable by the user, but will scroll if the user writes more than fits in the set size. When the user clicks into the box and begins typing, the placeholder text will disappear and a box-shadow will highlight the Text Area.

  &nbsp;

  You can change (or omit) the placeholder text by editing the 'placeholder' prop. You can also change the max-width and height to suit your layout by passing in pixel dimensions. The width is set to 100%, so it will resize down on mobile devices, no matter what max-width you set. However, please keep mobile users in mind when you set the height and **don't exceed 150px.**`)(() =>

    <TextArea
      maxWidth={400}
      height={150}
      changeHandler={(e) => console.log(e)}
      placeholder="Here's some sample instructional text. It will disappear when the user starts typing."
    />
  ))

  .add('Search Bar',
  withInfo(`When the user clicks into the box, the placeholder text will disappear and a box-shadow will highlight the Search Bar.

  &nbsp;

  You can change (or omit) the placeholder or button text by editing the 'placeholder' or 'buttonText' props. You can also change the max-width to suit your design by passing in pixel dimensions. The width is set to 100%, so it will resize down on mobile devices, no matter what max-width you set.`)(() =>

    <Search
      maxWidth={200}
      placeholder="Search for a thinker"
      buttonText={<FontAwesomeIcon icon={["fas","search"]}/>}
      onSearch={(text)=>console.log(text)}
    />
  ))

  .add('Form',
  withInfo(`
    #### Form

    The Form property is a wrapper for all standard HTML forms to ensure our styles are applied. The Form component itself renders its children with no modifications, but exposes a number of child components to ensure consistent styling.

    &nbsp;

    #### Form Fields

    'Form.Fields' is a simple div, with field arrangement styles applied. You can supply the prop 'arrangement' to control whether fields are vertically or horizontally arranged

    &nbsp;

    #### Form Actions
    'Form.Actions' is a simple div that ensures action components are rendered according to our style rules, with actions lined up vertically. Unless there's a good reason to do otherwise, only <Button> tags should be used as the UI element for the action.

    &nbsp;

    #### Form Input

    'Form.Input' is the replacement for a standard input control. It accepts all properties of the standard HTML input as well as a few others.

    &nbsp;

    When the user clicks into the box, a box-shadow will highlight the active field. When they start typing, the placeholder text will disappear.

    &nbsp;

    You can change the form type by passing in different standard HTML types (text, number, date, radio, checkbox, etc.). For numerical inputs, you can set mins and maxes.

    &nbsp;

    You can change (or omit) the placeholder text by editing the 'placeholder' prop.

    &nbsp;

    You can change the max-width to suit your design by passing in pixel dimensions. The width is set to 100%, so it will resize down on mobile devices, no matter what max-width you set.`)(() =>
  <>
    <h3>Vertical Alignment</h3>
    <Form>
      <Form.Fields>
        <Form.Input
          maxWidth={300}
          placeholder="Thinker Name"
          type="text"
        />

        <Form.Input
          maxWidth={200}
          placeholder="Email address"
          type="email"
        />

        <Form.Input
          maxWidth={200}
          placeholder="Password"
          type="password"
        />

        <Form.Input
          maxWidth={140}
          type="date"
        />

        <Form.Input
          maxWidth={50}
          placeholder="Score"
          type="number"
          min={1}
          max={5}
        />


        <Form.Input type="radio"/>
        <Form.Input type="radio"/>
        <Form.Input type="radio"/>

        <Form.Input type="checkbox"/>
      </Form.Fields>
      <Form.Actions>
        <Button
            type="submit"
            buttonText="Submit"
          />
          <Button
              type="submit"
              buttonText="Cancel"
            />
      </Form.Actions>
    </Form>

    <h3> Horizontal Alignment </h3>
    <Form>
      <Form.Fields arrangement="horizontal">
        <Form.Input
          maxWidth={300}
          placeholder="First Name"
          type="text"
        />

      <Form.Input
          maxWidth={300}
          placeholder="Last Name"
          type="text"
        />
      </Form.Fields>
    </Form>
  </>
  ));

storiesOf('UI Components|Data Visualization', module)
  .add('Data Table',
  withInfo(`Tables should be used anytime there is a large amount of information to be organized.

  To use these styles, copy the CSS into your local file.`)(() =>

      <Table/>
    ))


  .add('Bar Graph / Progress Bar',
  withInfo(`These can be used stacked together to create a Bar Graph, or alone as a Progress Bar.

  &nbsp;

  You can change (or omit) the title by editing the 'title' prop. Set the percentage by changing the 'percentage' prop.

  &nbsp;

  You can also change the max width and height to suit your design by passing in pixel dimensions. The width is set to 100%, so it will resize down on mobile devices, no matter what max-width you set. The height default is set to 40px.

  &nbsp;

  You can turn off the hover toggle by setting 'hoverVisibility' to 'hidden'.`)(() =>
  <span>
    <ProgressBar
      maxWidth={400}
      maxHeight={30}
      percentage={70}
      title="Completed HBDI"
    />
    <ProgressBar
      maxWidth={400}
      maxHeight={30}
      percentage={50}
      title="Completed First Video"
    />
    <ProgressBar
      maxWidth={400}
      maxHeight={30}
      percentage={30}
      title="Completed First Activity"
    />
    <br/>
    <ProgressBar
      hoverVisibility="hidden"
      maxWidth={400}
      maxHeight={10}
      percentage={80}
    />
    </span>
  ));

  storiesOf('UI Components|Logo and Logotype', module)
    .add('Logo',
      withInfo(`
        Representing a simplified version of the original Herrmann logo, this mark stays true to the recognizable symbol that has always defined us as a company, combining references to the brain's neural circuitry with the philosophical resonance of the Chinese "long life" symbol.

        &nbsp;

        The "wiring" of each quadrant is pared down to its essential form an connected by the white space, which is a critical part of our branding. Within that frame, an "H" representing the Herrmann name emerges in the negative space and extends into the core of each quadrant, like the white matter of the corpus collosum – reinforcing that our Whole Brain approach helps connect the different thinking systems of our minds. It also serves as a small "aha" moment for the viewer, linking back to a core element of our brand DNA – the transformative "aha" moment you get when you get your HBDI results.

        &nbsp;

        Choose which variety of our logo to use (wordmark or icon) by setting the 'type' to 'full' or 'icon' when you call this component, and set a max width by passing in a pixel amount. If no max width is set, the logo will default to 100%. It is automatically centered within its container.
      `)(() =>
      <span>
        <Logo
          type="icon"
          maxWidth={100}
        />
      </span>
      ))

      .add('Logotype',
        withInfo(`
        Choose which variety of our logo to use (icon or wordmark) by setting the 'type' to 'full' or 'icon' when you call this component, and set a max width by passing in a pixel amount. If no max width is set, the logo will default to 100%. It is automatically centered within its container.
        `)(() =>
        <span>
          <Logo
            type="full"
            maxWidth={300}
          />
        </span>
        ));

storiesOf('Design Guidelines|Company Name', module)
    .add('Usage Guidelines',
    (() =>
      <>
      <p>"Herrmann" is the correct way to refer to the company.</p>

      <p>For our logotype, our company name is stylized as **Herrmann** to give warmth and humanity to our brand, using a modified version of our core Proxima Nova font for consistency with other typography, but in a dark grey color which differentiates it from our more frequent use of black. Please note that due to the modifications to the typeface, the logtype should never be re-created with on-device fonts.</p>

    <p>As part of our “One Herrmann” initiative, all regional/global Herrmann oces should use one consistent logo, with no additional geographic designation. Instead, location should be included with other contact information, for example in the “Contact Us” section of the website, in an email signature, or opposite the logo on letterhead. Always make sure you have a high resolution copy of the logo (ideally in vector format), which can be scaled up or down as needed with good quality</p>

      <h4>Why "Herrmann" and not "Herrmann International"?</h4>

      <p>Herrmann is a more relatable name, and allows us to do more to give our brand the human touch that our DNA is built around. Adding a geographic designation, "International", or "Solutions" at the end of the company logotype doesn't describe what we do, and positions us as a lifeless corporation rather than a warm, personable part of the lives of our Thinkers and Practitioners.</p>

    <h4>When to use "Herrmann International"</h4>

      <p>When referring to the copany in any corporate document, you may use the full name of Herrmann International, but when used for branding the more personal standalone "Herrmann" should be used.</p>

      <h4>When to use "HBDI"</h4>

      <p>The HBDI is one of our offerings, and should only be used to refer to that specific product. Because it is only one piece of the broader Whole Brain system and approach, and that broader system is the real value we add, referring to us as HBDI devalues our brand and puts us in the category of "just another assessment company".</p>
      </>
      ));

storiesOf('UI Components|Graphics', module)
  .add('Quadrant Icons',
    withInfo(`
      These are the Herrmann branded icons for each Whole Brain quadrant: A, B, C, and D. They are each in the color for their respective quadrant. You can set the quadrant and the max-width in the props.

      &nbsp;

      This component _can_ be used as the sole identifying factor of a specific quadrant association, since it includes both icon and color as methods of quadrant description – however, it is highly recommended that you use these with the associated quadrant letter, whenever possible.
    `)(() =>
    <span style={{display: "flex", justifyContent: "space-around"}}>
      <QuadIcon
        maxWidth={50}
        quad="A"/>
      <QuadIcon
        maxWidth={50}
        quad="B"/>
      <QuadIcon
        maxWidth={50}
        quad="C"/>
      <QuadIcon
        maxWidth={50}
        quad="D"/>

    </span>
    )
  )

  .add('Loading Animation',
  withInfo(`This is an SVG / CSS animated loading graphic for any situations when retreiving data would cause a noticable wait for the user.
`)(() =>

    <span>
      <Loading maxWidth={100}/>
    </span>
  ))

  .add('Brainy Bunch',
  withInfo(`This is an SVG graphic of the "Brainy Bunch" characters.
  `)(() =>

    <span>
      <BrainyBunch maxWidth={500}/>
    </span>
  ))

  .add('Sparkle Animation',
  withInfo(`This is an animated SVG of a "sparkle" effect. Should be used for user accomplishments and celebrations.

  With all animated components, there are three props that can be passed in:
  * maxWidth, which accepts a number that determines the maximum width of the graphic in pixels.
  * repeat, which accepts a number that determines how many times the animation will repeat before stopping. A '-1' will repeat forever.
  * delay, which accepts a number that determines the number of seconds the animation will delay before starting.
  `)(() =>

    <span>
      <Sparkle maxWidth={60} repeat={1} delay={0}/>
    </span>
  ))


  .add('Decoder Ring Animation',
  withInfo(`This is an animated SVG of the decoder rings. Can be used for loading (when set to loop indefinitely), or to signify completion or ideas "clicking" together.

  With all animated components, there are three props that can be passed in:
  * maxWidth, which accepts a number that determines the maximum width of the graphic in pixels.
  * repeat, which accepts a number that determines how many times the animation will repeat before stopping. A '-1' will repeat forever.
  * delay, which accepts a number that determines the number of seconds the animation will delay before starting.
`)(() =>

    <span>
      <DecoderRings maxWidth={300} repeat={0} delay={1}/>
    </span>
  ));

storiesOf('UI Components|Accordion', module)
  .add('Without Border',
    withInfo(`
      Accordions are meant for use when the conservation of screen space is important and the viewing of material is _completely optional_. **Remember that a user may choose not to open a closed accordion box.**

      &nbsp;

      The props allow you to change the max-width of the accordion, the color of the outer border and header text (with "white" also being an option), the header title, and the content. Header text and border color should always match – the only exception to this is if the color is too light to read (like yellow or green). If the textColor or borderColor are omitted, they will default to grey (as in the second example above).

      &nbsp;

      Remember that if you choose to use a colored border or colored title text, your title text content **must** label the associated quadrant, so that the color is not the only quadrant-identifying factor.

      &nbsp;

      The content prop assumes you are passing in a string, and will wrap the input in <p> tags; however, you could also pass in JSX.
    `)(() =>
      <span>
        <Accordion
          maxWidth={500}
          borderColor="white"
          textColor="blue"
          title="A Quadrant"
          jsx={testProp()}
          />
          <br/>
      </span>
    )
  )

  .add('Border',
  withInfo(`
    Accordions are meant for use when the conservation of screen space is important and the viewing of material is _completely optional_. **Remember that a user may choose not to open a closed accordion box.**

    &nbsp;

    The props allow you to change the max-width of the accordion, the color of the outer border and header text (with "white" also being an option), the header title, and the content. Header text and border color should always match – the only exception to this is if the color is too light to read (like yellow or green). If the textColor or borderColor are omitted, they will default to grey (as in the second example above).

    &nbsp;

    Remember that if you choose to use a colored border or colored title text, your title text content **must** label the associated quadrant, so that the color is not the only quadrant-identifying factor.

    &nbsp;

    The content prop assumes you are passing in a string, and will wrap the input in <p> tags; however, you could also pass in JSX.
  `)
  (() =>

  <Accordion
    maxWidth={600}
    startOpen={true}
    borderColor="navy"
    title="Group 2"
    content="Look at me, surprise text!"
    />

  ));

function testProp() {
  return (
    <div>
      <p>This is a test</p>
      <h2>A big test</h2>
    </div>
  )
}

storiesOf('UI Components|Tabs', module)
.add('Default',
  withInfo(`
    Tabs are meant for use when the conservation of screen space is important and the viewing of material is _optional_. **Remember that a user may choose not to view all available tabs.** If you find yourself using more than 3-4 tabs, that's a red flag indicating that you should re-evaluate whether this is the right format for that information, or whether all the information is necessary to include in the first place.

    &nbsp;

    The tab browser has a minimum width of 200px. At less than 400px screen size, the tabs will stack. The max width is editable via the maxWidth prop.

    &nbsp;

    You can change the color of the underline beneath the active tab to any of our brand colors via the highlightColor prop. Remember that if you choose to use a colored border or colored title text, your content **must** label the associated quadrant, so that the highlight color is not the only quadrant-identifying factor.

    &nbsp;

    The tabs prop is where your content goes. Follow the example given in Story Source, and replace the label and content with your information.
  `)(() =>
  <>
  {console.log(testProp)}
    <Tabs
      highlightColor="navy"
      contentBorder={false}
      maxWidth={600}
      onChange={(activeTab) => {console.log("The active tab is:", activeTab)}}
      tabs={[{
        tab1: {
          label: 'Group 1',
          content: [testProp()]
        },
        tab2: {
          label: 'Group 2',
          content: `Vestibulum ultrices risus eu est imperdiet ultrices. Nam tincidunt enim non tempus vestibulum. Maecenas ullamcorper diam lobortis est interdum mollis.`
        },
        tab3: {
          label: 'Group 3',
          content: `Sed eu quam id tortor venenatis porta.`
        },
        tab4: {
          label: 'Group 4',
          content: `Suspendisse ut ex elementum nulla luctus pellentesque non scelerisque magna.`
        }}]
      }
      active="tab4"
    />
    </>
  )
);

storiesOf('UI Components|Clusters', module)
.add('Default',
  withInfo(`
    Clusters are intended to show thinkers why their thinking preferences may manifest differently as compared to someone else with a similar profile. The thinker is directed to click quadrants on a minimalist profile model in order to explore the clusters associated with that quadrant and see their own selected / implied traits in those clusters.

    &nbsp;

    This component is fully responsive – the clusters stack beneath the model on small screens, and the model and instructions switch places so the user can easily see both the model and associated clusters with minimal scrolling.

    &nbsp;

    The implied and selected traits for that specific user are passed in as props (see example below).
  `)(() =>
    <Clusters
      traits={[{
        selected: ['critical', 'numerical', 'logical', 'analytical', 'technical', 'playful', 'innovative', 'visual', 'conceptual', 'teacher_trainer', 'writer', 'traditional', 'reader', 'detailed', 'reliable', 'linear'],
        implied: ['rational', 'realistic', 'financial', 'on_time', 'gets_things_done', 'neat', 'preventive', 'future_oriented', 'strategic']
      }]
    }/>
  )
);

storiesOf('UI Components|Alert Bar', module)
.add('Error',
  withInfo(`
    Errors should tell the user, as specifically as possible, what went wrong and how to correct it. If the error is purely technical and there's no action the user can take, the message should include an error code of some kind (that will convey meaning to the Support and/or Platform team) and instruction to submit that error code via a ticket. There is also a button, which can accept an onClick action, and a close (x), which also accepts an onClick action that should be used to dismiss the error.
  `)(() =>
    <AlertDisplay
      type='error'
      message='Error'
      code="Code 12345; Please retry or submit a ticket."
      displayButton={true}
      button={{text: 'Button Text Here', action: ()=>{
        alert("You've been alerted!")
      }}
      }
      xAction={()=>{
        alert("You clicked the Close button!")
      }}
    />
  )
)
.add('Warning',
  withInfo(`
    Warnings should tell the user, as specifically as possible, that they did something incorrectly and what they need to do to correct it. If the issue is purely technical and there's no action the user can take, you should use an 'error' instead of a 'warning'. You can optionally inlude a button by setting 'displayButton' to true.
  `)(() =>
    <AlertDisplay
      type='warning'
      message='Warning: Not all fields complete, please review and resubmit.'
      xAction={()=>{
        alert("You clicked the Close button!")
      }}
    />
  )
)
.add('Confirmation',
  withInfo(`
    Confirmations should tell the user that an action has been completed successfully. It should be shown after any time the user hits a submit button, makes an edit or change to something, or completes some kind of user input related action and saves. You can optionally inlude a button by setting 'displayButton' to true.
  `)(() =>
    <AlertDisplay
      type='confirmation'
      message='Submission confirmed, thank you!'
    />
  )
);

let profileScores = {A: "67", B: "20", C: "80", D: "66"}
let preferenceCode = {A: "0", B: "2", C: "3", D: "1"}
let underPressure = {A: "109", B: "48", C: "56", D: "40"}
let scores = [
  {title: "Preference Code", ...preferenceCode},
  {title: "Profile Score", ...profileScores},
  {title: "Under Pressure", ...underPressure}
]
storiesOf('UI Components|Score Table', module)
  .add('Default',
    withInfo(`
      The Score Table displays any kind of score that is organized into our standard, A,B,C,D quadrant. The scores are stacked, so that the user can easily compare them. There are two ways to call this component. The component supports using named props for the standard scores of Profile Scores, Preference Code, and Under Pressure Scores. It also supports passing in an array of custom score objects of the form \`{title, A, B, C, D}\`. If the array is provided, the named scores are ignored. Note when using the named scores, we transform the preference code to replace 0's with 1's, according to how we generally display the preference code. However we do not do this when using the custom array

      &nbsp;

      This component needs some work to meet our current accessibility standards, since the quadrant associations are only identified by color at this point in time. It can still be used, but with the understanding that our visually impaired users may struggle until we are able to make design edits.
    `)(() =>
    <span>
      <h3>Using Named Scores</h3>
      <ScoreTable
        preferenceCode = {preferenceCode}
        profileScores = {profileScores}
        underPressure = {underPressure}
        preferenceCodeTitle = "Preference Code"
        profileScoreTitle = "Profile Score"
        underPressureTitle = "Under Pressure"
      />
      <h3>Using Array</h3>
      <ScoreTable
        scores={scores}
      />
    </span>
    )
  );

  storiesOf('UI Components|Quadrant Label', module)
    .add('Default',
      withInfo(`
        Labels for each quadrant in the Whole Brain Model. Each includes the letter and icon in the associated color.

        &nbsp;

        Optionally, you can add a few words of content by useing the "content" prop and passing in a string. Note that the label box does have a max-height and this space is not intended to be used for long body copy – only short titles or descriptive labels.

        &nbsp;

        You can also determine whether or not the letter is oriented on the right or left side by using the 'letterOnRight' prop set to true – the component defaults to a layout with the letter on the left-hand side.
      `)(() =>
        <span>
          <QuadrantLabel letter={"A"}/>
          <QuadrantLabel letter={"B"} content="Planning"/>
          <QuadrantLabel letter={"C"} letterOnRight={true}/>
          <QuadrantLabel letter={"D"} content="Synthesizing" letterOnRight={true}/>
        </span>
      )
    );

  storiesOf('UI Components|Walkaround', module)
    .add('Default',
      withInfo(`
        A fully responsive Whole Brain Walkaround component that re-orders to stack alphabetically on mobile. Pass in a string to fill the walkaround quadrant; accepts markdown for styling.
      `)(() =>
        <span>
          <Walkaround
            maxWidth={900}
            A={[testProp()]}
            B="**HOW:** <br/> By combining four Tile components with the power of CSS Grid"
            C="**WHO:** <br/> Developers who want to ensure they're walking around ideas in a fully responsive, on-brand way."
            D="**WHY:** <br/> So that walkarounds can keep their standard layout on larger screen sizes, then adjust to an alphabetical A, B, C, D order on small screens."
          />
        </span>
      )
    );

  storiesOf('UI Components|Switch', module)
    .add('Default',
      withInfo(`
        A switch used for toggling between two options. It optionally accepts two strings, to set the labels on the background of the switch. The size cannot be customized, so if the words do not fit inside the switch, move them outside the switch (by adding text around or above the switch component when you place it) and leave the switch labels blank. You can pass in an 'onChange' behavior, as well as determining which position the toggle defaults to (checked or unchecked) by setting 'checked' to 'true' or 'false'.
      `)(() =>


        <span>
          <Switch
            pos1Label="On"
            pos2Label="Off"
            onChange={()=>{
              console.log("Toggled!")
            }}
          />
        </span>
      )
    );

    storiesOf('UI Components|Flip Card', module)
      .add('Default',
        withInfo(`
          A flippable card.
        `)(() =>
          <span style={{display: "flex", justifyContent: "space-around"}}>
            <FlipCard
              width={225}
              height={200}
              quad="A"
              cardFront={<h3>Inefficient use of Time</h3>}
              cardBack={
                <>
                  <p>Be brief, clear and precise</p>
                  <p>Speak in clear and short sentences</p>
                  <p>Ask how much time you have and honor it</p>
                </>
              }
              flipped={false}
            />

            <FlipCard
              width={150}
              height={150}
              cardFront={<h3>Hey there</h3>}
              cardBack={
                <>
                  <p>oh hey, I'm already flipped over</p>
                </>
              }
              flipped={true}
            />

            <FlipCard
            width={225}
            height={200}
              quad="C"
              cardFront={<h3>Repetition</h3>}
              cardBack={
                <>
                <p>Plan on half the presentation time-so you are concise</p>
                <p>Stop and ask if people "get it" before reinforcing your ideas</p>
                <p>Tell stories, use metaphors and pictoral examples</p>
                </>
              }
              flipped={false}
            />
          </span>

        )
      );
    storiesOf('UI Components|Callout', module)
      .add('Default',
        withInfo(`
          A box to be used for calling out important information in a page layout. Should be used sparingly – remember that if everything is called out, nothing is. Pass in any children you like to wrap them in this styled box.
        `)(() =>
          <Callout>
            <span>Look at me! I'm important information!!</span>
          </Callout>
        )
      );

    storiesOf('UI Components|Drawer', module)
      .add('Default',
        withInfo(`
          A drawer.
        `)(() =>
          <Drawer
            maxWidthOpen={350}
            maxWidthClosed={50}
            startOpen={false}
            open={
              <div>
                <ProfileMap
                  profileScores={{
                    A: 80,
                    B: 50,
                    C: 50,
                    D: 30
                  }}
                />
                <ScoreTable
                  preferenceCode={{
                    A: '0',
                    B: '2',
                    C: '3',
                    D: '1'
                  }}
                  preferenceCodeTitle="Preference Code"
                  profileScoreTitle="Profile Score"
                  profileScores={{
                    A: '67',
                    B: '20',
                    C: '80',
                    D: '66'
                  }}
                  underPressure={{
                    A: '109',
                    B: '48',
                    C: '56',
                    D: '40'
                  }}
                  underPressureTitle="Under Pressure"
                />
                <h1>akjdf akdsf akdsf akdf aksdfiaefjkdfaks aief askdfj aiae kaifjd aldkiajfla jfiaf ejo </h1>
              </div>

            }
            closed={
              <div>
                <p>KGN</p>
                <ProfileMap
                  profileScores={{
                    A: 80,
                    B: 50,
                    C: 50,
                    D: 30
                  }}
                />
                <p>1121</p>
              </div>
            }
          />
        )
      );

      storiesOf('UI Components | Nav', module)
        .add('Default',
          withInfo(`
            A vertical nav bar for use in the Portal and HBDI Digital (and beyond?).
          `)(() =>
            <Nav
              userInitials="KGN"
              profileScores={{A: 60, B: 20, C: 120, D: 80}}
              homeLabel="Home"
              settingsLabel="Settings"
              resultsLabel="HBDI® Results"
              showResultsIcon={true}
              profileLabel="Profile"
              showProfileIcon={true}
              logoutLabel="Logout"
              startOpen={true}
              allowClosed={false}
            />
          )
        );


        storiesOf('UI Components | Draggable List', module)
          .add('Default',
            withInfo(`
              A vertical nav bar for use in the Portal and HBDI Digital (and beyond?).
            `)(() =>
              <DraggableList
                list={["A", "B", "C", "D"]}
              />
            )
          );

          storiesOf('UI Components | Radio Button Quiz', module)
            .add('Default',
              withInfo(`
                A vertical nav bar for use in the Portal and HBDI Digital (and beyond?).
              `)(() =>
                <RadioButtonQuiz
                  options={["Going to the Beach", "Taking a Hike", "Reading a Book", "Watching Netflix"]}
                  formName="test_form"
                />
              )
            );
