import './common.js'
import React from 'react';
import { setAddon, storiesOf } from '@storybook/react';
import { withInfo } from '@storybook/addon-info'
import ProfileMapGenerator from '../components/profile-map-generator'
import ProfilePercentageGenerator from '../components/profile-percentage-generator'
import {Profile} from '../components/profile'
import FortuneTeller from '../components/fortune-teller'
import {ProfilePolygon} from '../components/profile-polygon'

storiesOf('Internal Tools|Profile Map Generator', module)
  .add('Default',
  withInfo('This is a tool intended to be for internal Herrmann use ONLY. By inputting A, B, C, and D scores in each input box, a mockup profile can be generated. This is ideal for use in presentations, demos, mockups, etc. when a quick example profile is needed that is not associated with a specific Thinker.')(() =>
  <>
    <ProfileMapGenerator/>
  </>
));

storiesOf('Internal Tools|Profile Percentage Generator', module)
  .add('Default',
  withInfo('This is a tool intended to be for internal Herrmann use ONLY. By inputting A, B, C, and D scores in each input box, a mockup profile percentage photo can be generated. This is ideal for use in presentations, demos, mockups, etc. when a quick example profile is needed that is not associated with a specific Thinker.')(() =>
  <>
    <ProfilePercentageGenerator/>
  </>
));

storiesOf('Internal Tools | Fortune Teller', module)
  .add('Default',
    withInfo(`
      April Fools, MFs.
    `)(() =>{
      var fundamentals = {
        A: [
			   "Be results driven",
			   "Blameless problem solving",
			   "Measure it",
			   "Be a geek",
			   "Know the numbers"
        ],
			  B: [
         "Execute with speed & focus",
			   "Own it",
			   "Right is right",
			   "Quality as a religion",
			   "Respect others' time",
			   "Follow up, follow up"],
        D: [
			   "Think new",
			   "Anticipate",
			   "Be bold",
			   "Learn from mistakes",
			   "Think big",
			    "Design matters"
        ],
        C: [
			   "Engage with passion",
			   "Behave as One Herrmann",
			   "Step into their shoes",
			   "Communicate to be understood",
			   "Lighten up!",
			    "Thinkers matter"
        ]
		  };


      return <FortuneTeller maxWidth={400} fortunes={fundamentals} started={()=> console.log("started")} done={()=> console.log("done")}/>;
    })
  );

storiesOf('Internal Tools | Profile Background', module)
.add('Just the Map',
 withInfo('Using just the `Profile` component, you can set a max width and draw our basic Profile Map background.')(() =>

    <Profile maxWidth={300}/>

  ))
  .add('Map with other elements',
   withInfo(`The 'Profile' component can also include nested components – currently, Profile.Circle and Profile.Element. Both Profile.Circle and Profile.Element place their child contents into an SVG that is positioned relatively to the Profile background.

  **Profile.Circle** is intended to draw a small profile circle on the background (such as for a team report) when you pass in a ProfilePolygon component. Because Profile.Circle draws a perfect circle, the width also determines the height.

  **Profile.Element** is intended to be a general method to draw other objects on the map. Currently, it has intentionally been left very broad – as you can see in the example, we pass in a path to draw an SVG arrow. Profile.Element will accept a height in addition to a width, as well as viewBox information.

  Both Profile.Circle and Profile.Element accept x and y coordinates, which will place the object on the map (with x=0 / y=0 placing the top left corner of the object in the direct center of the map).
    `)(() =>

      <Profile maxWidth={300} type="preference">
        <Profile.Circle x={35} y={-5} width={20}>
          <ProfilePolygon strokeWidth={3} scores={{A:100, B:60, C:20, D:80}} />
        </Profile.Circle>
        <Profile.Circle x={0} y={-50} width={20}>
          <ProfilePolygon strokeWidth={3} scores={{A:80, B:50, C:50, D:30}} />
        </Profile.Circle>
        <Profile.Circle x={60} y={60} width={20}>
          <ProfilePolygon strokeWidth={3} scores={{A:30, B:90, C:80, D:50}} />
        </Profile.Circle>
        <Profile.Circle x={-60} y={20} width={20}>
          <ProfilePolygon strokeWidth={3} scores={{A:70, B:10, C:90, D:90}} />
        </Profile.Circle>
        <Profile.Element x={30} y={50} width={30} height={30} viewBox={"0 0 500 500"}>
          <path fill="currentColor" d="M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z"></path>
        </Profile.Element>
      </Profile>

    ))
