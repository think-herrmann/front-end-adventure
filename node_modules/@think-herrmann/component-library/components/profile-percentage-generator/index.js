import cx from 'classnames'
import React from 'react';
import FontAwesomeIcon from '@fortawesome/react-fontawesome'
import {faExclamationCircle} from '@fortawesome/fontawesome-free-solid'
import PropTypes from 'prop-types';
import {Link} from 'react-router-dom'

import styles from './styles.css'
import ProfilePercentagePhoto from '../profile-percentage-photo'
import Button from '../button'
import Form from '../form'
import Tile from '../tile'

export default class ProfilePercentageGenerator extends React.Component {

  constructor(props) {
    super()
    this.state = {
      redirect: false,
      code: [null, null, null, null],
      finalScore: {},
      currentScore: {},
      initials: ""
    };
  }

  setCode(e, i) {
    let userCode = [...this.state.code]
    userCode[i] = parseInt(e.target.value)
    this.setState({code: userCode});

    const keys = ["A", "B", "C", "D"]
    let currentScore = {}
    keys.forEach((key, i) => currentScore[key] = userCode[i]);
    this.setState({currentScore: currentScore})
  }

  setInitials(e) {
    let initials = e.target.value
    this.setState({initials: initials})
  }

  render() {

    function isUnlocked(currentValue) {
      return currentValue != null
             && currentValue != ""
             && currentValue > 0
             && currentValue != 0
    }

    let unlocked = this.state.code.every(isUnlocked)

    return (
      <Tile maxWidth={400} className={styles.centered}>
      <p className={styles.instructions}>Input scores <i>(ex. 67, 25, 80, 77)</i> for each quadrant into the boxes below to generate a profile percentage with those scores.</p>
      <div className={styles.generatorWrapper}>
        <Form>

          <div className={styles.flexForm}>
            <div>
              <p><b>Profile Score</b> <i>(required)</i></p>
              <div className={styles.formLabel}>
                <h2>A</h2>
                <h2>B</h2>
                <h2>C</h2>
                <h2>D</h2>
              </div>
              <Form.Fields arrangement="horizontal" >
                {
                  _.range(0, 4).map((i) => {
                    return (
                      <Form.Input id={i}
                        maxWidth={40}
                        maxLength={1}
                        type="number"
                        min={1}
                        max={200}
                        key={i}
                        onChange={(e) => this.setCode(e, i)}
                      />
                    );
                  })
                }
              </Form.Fields>
              <p><b>User initials</b> <i>(optional)</i></p>
              <Form.Input
                maxWidth={40}
                maxLength={2}
                type="text"
                onChange={(e) => this.setInitials(e)}/>
              </div>
            <Form.Actions>

              <Button
                variant="primary"
                type="button"
                buttonText="Create"
                onClick={(e) => this.setState ({finalScore: this.state.currentScore})}
                className={cx({[styles.unlocked]:unlocked}, styles.locked, styles.button)}
              />

          </Form.Actions>
        </div>
      </Form>

      <div className={styles.mapWrapper}>
        { this.state.finalScore === this.state.currentScore &&
          <ProfilePercentagePhoto
            name="custom"
            initials={this.state.initials}
            profileScores={this.state.finalScore}
            maxWidth={150}
          />
          }
          {this.state.currentScore != this.state.finalScore &&
            <ProfilePercentagePhoto
              name="custom"
              profileScores={{A:0, B:0, C:0, D:0}}
              maxWidth={150}/>
        }
      </div>
      </div>
    </Tile>
    )
  }
}
