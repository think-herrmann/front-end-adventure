import cx from 'classnames'
import React from 'react';
import FontAwesomeIcon from '@fortawesome/react-fontawesome'
import {faExclamationCircle} from '@fortawesome/fontawesome-free-solid'
import PropTypes from 'prop-types';
import {Link} from 'react-router-dom'

import styles from './styles.css'
import Button from '../button'
import Form from '../form'

export default class PreferenceCodeInput extends React.Component {

  constructor(props) {
    super()
    this.state = {
      redirect: false,
      code: [null, null, null, null],
      finalCode: ''
    };
  }

  setCode(e, i) {
    let userCode = [...this.state.code]
    userCode[i] = e.target.value
    this.setState({code: userCode});
    this.setState({finalCode: userCode.join('')});
  }

  render() {

    function isUnlocked(currentValue) {
      return currentValue != null
             && currentValue != ""
             &&currentValue < 4
             && currentValue != 0
    }

    let unlocked = this.state.code.every(isUnlocked)

    function isValid(currentValue) {
      return currentValue < 4
             && currentValue != 0
             && currentValue != ""
    }

    let valid = this.state.code.every(isValid)

    let allNull = this.state.code.every( (val, i, arr) => val === arr[0] )

    if (allNull == true) {
      valid = true
    }
    else if (valid == true && allNull == false) {
      valid = true
    }
    else { valid = false }

    return (
      <Form>
        <div className={styles.flexForm}>
        <Form.Fields arrangement="horizontal" >
          {
            _.range(0, 4).map((i) => {
              return (
                <Form.Input id={i}
                  maxWidth={30}
                  maxLength={1}
                  type="number"
                  min={1}
                  max={3}
                  key={i}
                  onChange={(e) => this.setCode(e, i)}
                />
              );
            })
          }

        </Form.Fields>
        <Form.Actions>
          {
            this.props.button.action == undefined &&
            <Link to={'/preference_code/'+this.state.finalCode} className={cx({[styles.unlocked]:unlocked}, styles.locked)}>
              <Button
                variant="primary"
                buttonText={this.props.button.text}
                className={styles.button}
                />
            </Link>
          }
          {
            this.props.button.action != undefined &&
            <>
          <Button
            variant="primary"
            type="button"
            buttonText={this.props.button.text}
            onClick={e=> this.props.button.action(e, this.state.finalCode)}
            className={cx({[styles.unlocked]:unlocked}, styles.locked, styles.button)}
          />
          </>
          }
      </Form.Actions>
      </div>
      {
        valid == false &&
        <p className={styles.error}>
          <FontAwesomeIcon icon={["fas", "exclamation-circle"]} className={styles.icon}/>
          {this.props.errorMessage}
        </p>
      }
    </Form>
    )
  }
}
