import cx from "classnames";
import React from "react";
import FontAwesomeIcon from "@fortawesome/react-fontawesome";
import { faSearch } from "@fortawesome/fontawesome-free-solid";
import PropTypes from "prop-types";

import styles from "./styles.css";
import Button from "../button";
import AlertDisplay from "../alert";

function Input(props) {
  let {
    name,
    placeholder,
    types,
    min,
    max,
    maxWidth,
    errors,
    className,
    ...inputProps
  } = props;
  var dimensions = {
    maxWidth: props.maxWidth + "px",
  };

  errors = errors || [];

  return (
    <div className={className}>
      <input
        aria-invalid={errors.length > 0 ? true : false}
        aria-errormessage={errors.length > 0 ? `${name}-errors` : ""}
        name={name}
        className={styles.input}
        style={dimensions}
        placeholder={props.placeholder}
        type={props.type}
        min={props.min}
        max={props.max}
        {...inputProps}
      />
      <div className={styles.errors} aria-live="polite" id={`${name}-errors`} style={dimensions}>
        {(errors).map((e) => (
          <AlertDisplay key={e.message} message={e.message} type={e.type} />
        ))}
      </div>

    </div>
  );
}

function Fields(props) {
  let { arrangement = "vertical" } = props;
  return <div className={styles[arrangement]}>{props.children}</div>;
}

function Actions(props) {
  return (
    <div className={cx(styles.horizontal, styles.actions)}>
      {props.children}
    </div>
  );
}

export default class Form extends React.Component {
  static Input = Input;
  static Fields = Fields;
  static Actions = Actions;

  render(props) {
    return (
      <form className={styles.form}>
        {this.props.children}
        <div className={styles.actions}></div>
      </form>
    );
  }
}

Input.propTypes = {
  type: PropTypes.oneOf([
    "number",
    "date",
    "password",
    "email",
    "text",
    "radio",
    "checkbox",
    "range",
    "url",
    "tel",
    "time",
  ]),
  errors: PropTypes.arrayOf(PropTypes.shape(AlertDisplay.propTypes)),
  min: PropTypes.number,
  max: PropTypes.number,
  maxWidth: PropTypes.number,
  placeholder: PropTypes.string,
};
