import React from 'react';
import FontAwesomeIcon from '@fortawesome/react-fontawesome'
import {faSortDown, faSortUp} from '@fortawesome/fontawesome-free-solid'
import PropTypes from 'prop-types'
import Markdown from 'react-markdown/with-html'
import cx from 'classnames'

import styles from './styles.css'
import {Colors} from '../colors';

class CreateAccordion extends React.Component {

  constructor(props) {
    super()
    this.state = {
      contentVisible: props.startOpen,
    };
  }

  _toggleContent(viewContent){
    this.setState({contentVisible: !viewContent});
  }

  _renderContent(props) {
    return (
      <div className={styles.contentWrapper}>
        {this.props.content != undefined &&
          <Markdown
            escapeHtml={false}
            source={this.props.content}/>
        }
        {this.props.jsx != undefined &&
          <div>{this.props.jsx}</div>
        }
      </div>
    )
  }

  render(props) {

    var divStyle = {
      maxWidth: this.props.maxWidth,
      borderColor: Colors[this.props.borderColor]
    }

    var color = {
      color: Colors[this.props.textColor]
    }

    const accesibilityProps = {
      ["aria-hidden"]: true
    };

    if(this.props.toggleLabels && !this.state.contentVisible){
      accesibilityProps["aria-hidden"] = false;
      accesibilityProps["aria-label"] = this.props.toggleLabels[0];
    } else if(this.props.toggleLabels && this.state.contentVisible) {
      accesibilityProps["aria-hidden"] = false;
      accesibilityProps["aria-label"] = this.props.toggleLabels[1];
    }

    return (
      <span role="group" aria-labelledby={this.props["aria-labelledby"]} aria-describedby={this.props["aria-describedby"]}>
        <div className={styles.accordion} style={divStyle}>
        <button disabled={this.props.locked} aria-labelledby={`${this.props["aria-labelledby"]}_toggle ${this.props["aria-labelledby"]}`} aria-expanded={this.state.contentVisible} className={styles.accordionHeader}
          onClick={()=>this._toggleContent(this.state.contentVisible)}>
        <FontAwesomeIcon id={`${this.props["aria-labelledby"]}_toggle`} {...accesibilityProps} icon={["fas", "sort-down"]} className={cx(styles.iconUp, this.state.contentVisible && styles.iconDown)}/>
            <h5 style={color}>{this.props.title}</h5>
          </button>
          {this.state.contentVisible && this._renderContent()}
        </div>
      </span>
    )
  }
}

export default function Accordion(props) {

  return (
    <CreateAccordion maxWidth={props.maxWidth}
      aria-labelledby={props["aria-labelledby"]}
      aria-describedby={props["aria-describedby"]}
      locked={props.locked}
      maxWidth={props.maxWidth}
      borderColor={props.borderColor}
      textColor={props.textColor}
      title={props.title}
      content={props.content}
      toggleLabels={props.toggleLabels}
      jsx={props.jsx}
      startOpen={props.startOpen}
    />
  )
}

Accordion.propTypes = {
  maxWidth:PropTypes.number,
  borderColor:PropTypes.oneOf([
    'red', 'green', 'blue', 'yellow', 'navy', 'white']),
  textColor:PropTypes.oneOf([
    'red', 'green', 'blue', 'yellow', 'navy', 'white']),
  title:PropTypes.node,
  content:PropTypes.node
}
